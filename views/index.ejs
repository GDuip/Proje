<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ultimate Real-Time Tracker</title>
    
    <!-- PWA Manifest & Theme -->
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#1f2937">

    <!-- External Libraries -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&family=Nunito:wght@600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" integrity="sha512-Zcn6bjR/8RZbLEpLIeOwNEnKuqOVowDszC4SdSpxAKwp5MVs/wsMZXRDxPRcPcVLEEaMoXIxdpL2sA7ilymAFA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!-- Embedded CSS -->
    <style>
        :root {
            --primary-hue: 244;
            --primary-saturation: 80%;
            --primary-lightness: 60%;
            --primary-color: hsl(var(--primary-hue), var(--primary-saturation), var(--primary-lightness));
            --background-start-rgb: 17, 24, 39;
            --background-end-rgb: 31, 41, 55;
            --card-background-rgb: 31, 41, 55;
            --text-rgb: 249, 250, 251;
            --subtle-text-rgb: 156, 163, 175;
            --border-rgb: 75, 85, 99;
            --shadow-color: rgba(0, 0, 0, 0.5);
            --font-main: 'Inter', sans-serif;
            --font-display: 'Nunito', sans-serif;
        }
        body.light-theme {
            --background-start-rgb: 243, 244, 246;
            --background-end-rgb: 229, 231, 235;
            --card-background-rgb: 255, 255, 255;
            --text-rgb: 31, 41, 55;
            --subtle-text-rgb: 107, 114, 128;
            --border-rgb: 209, 213, 219;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        *, *::before, *::after { margin: 0; padding: 0; box-sizing: border-box; }
        html { scroll-behavior: smooth; }
        body {
            font-family: var(--font-main);
            background: linear-gradient(135deg, rgb(var(--background-start-rgb)), rgb(var(--background-end-rgb)));
            color: rgb(var(--text-rgb));
            line-height: 1.6;
            overflow-x: hidden;
            transition: background-color 0.3s, color 0.3s;
        }

        #app-container { display: flex; flex-direction: column; min-height: 100vh; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(15px); } to { opacity: 1; transform: translateY(0); } }
        @keyframes pulse { 50% { box-shadow: 0 0 0 10px hsla(var(--primary-hue), var(--primary-saturation), var(--primary-lightness), 0); } }

		/* --- Header & Navigation --- */
        .app-header {
            background-color: rgba(var(--background-start-rgb), 0.8);
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px -5px var(--shadow-color);
            position: sticky; top: 0; z-index: 1000;
            padding: 0 5%; border-bottom: 1px solid rgba(var(--border-rgb), 0.5);
        }
        .navbar { display: flex; justify-content: space-between; align-items: center; height: 70px; }
        .nav-logo { display: flex; align-items: center; text-decoration: none; font-size: 1.5rem; font-weight: 800; font-family: var(--font-display); color: rgb(var(--text-rgb)); }
        .nav-logo i { margin-right: 12px; color: var(--primary-color); text-shadow: 0 0 10px var(--primary-color); border-radius: 50%; animation: pulse 2.5s infinite; }
        .nav-actions { display: flex; align-items: center; gap: 1rem; }
        .nav-links { display: flex; gap: 1.5rem; }
        .nav-link, .settings-btn {
            text-decoration: none; color: rgb(var(--subtle-text-rgb));
            font-weight: 500; padding: 10px 5px; border-bottom: 2px solid transparent;
            transition: all 0.3s ease; cursor: pointer; background: none; border-top: none; border-left: none; border-right: none; font-size: 1rem; font-family: var(--font-main);
        }
        .nav-link i, .settings-btn i { margin-right: 8px; }
        .nav-link:hover, .nav-link.active, .settings-btn:hover { color: rgb(var(--text-rgb)); border-bottom-color: var(--primary-color); }
        .settings-btn { border-bottom-style: dashed; }
        #mobile-menu-btn { display: none; background: none; border: none; font-size: 1.5rem; cursor: pointer; color: rgb(var(--text-rgb)); }
        
		/* --- Main Content & Views --- */
        .app-main { flex: 1; padding: 2rem 5%; }
        .view { display: none; animation: fadeIn 0.6s ease-out; }
        .view.active-view { display: block; }
        
		/* ---
		Toast & Notification System
		--- */
		#toast-container {
			position: fixed;
			top: 90px;
			right: 20px;
			z-index: 2000;
			display: flex;
			flex-direction: column;
			gap: 10px;
		}

		.toast {
			background: rgba(var(--card-background-rgb), 0.9);
			backdrop-filter: blur(5px);
			color: rgb(var(--text-rgb));
			padding: 15px 20px;
			border-radius: 8px;
			box-shadow: 0 4px 12px var(--shadow-color);
			display: flex;
			align-items: center;
			gap: 15px;
			border-left: 4px solid var(--primary-color);
			transform: translateX(120%);
			animation: slideIn 0.5s forwards, slideOut 0.5s 4.5s forwards;
		}
		
		.toast.error { border-left-color: #f87171; }
		.toast.success { border-left-color: var(--success-color); }
		.toast-icon { font-size: 1.5rem; }
		.toast.error .toast-icon { color: #f87171; }
		.toast.success .toast-icon { color: var(--success-color); }
		
		@keyframes slideIn { from { transform: translateX(120%); } to { transform: translateX(0); } }
		@keyframes slideOut { from { transform: translateX(0); } to { transform: translateX(120%); } }


        /* --- Cards, Forms and Buttons --- */
        .card {
            background: rgba(var(--card-background-rgb), 0.7);
            padding: 2.5rem; border-radius: 16px;
            box-shadow: 0 8px 32px var(--shadow-color); border: 1px solid rgba(var(--border-rgb), 0.5);
            backdrop-filter: blur(5px); margin-bottom: 2rem;
        }
        .hero-section h1 {
            font-size: clamp(2rem, 5vw, 3.5rem); font-family: var(--font-display);
            font-weight: 800; margin-bottom: 0.5rem;
            background: linear-gradient(90deg, hsl(var(--primary-hue), var(--primary-saturation), 70%), var(--primary-color));
            -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .hero-section p { font-size: 1.1rem; color: rgb(var(--subtle-text-rgb)); max-width: 600px; margin: 0 auto; }
        
		/* Package Form */
        #tracking-form { display: grid; grid-template-columns: 1fr; gap: 1rem; margin-top: 1.5rem; }
        .textarea-group { position: relative; }
        #tracking-number-input {
            width: 100%; min-height: 100px; resize: vertical;
            padding: 1rem; font-size: 1rem; line-height: 1.5;
            border: 1px solid rgba(var(--border-rgb), 0.5); border-radius: 8px;
            transition: all 0.3s ease; background-color: rgba(var(--background-end-rgb), 0.8);
            color: rgb(var(--text-rgb)); font-family: var(--font-main);
        }
        #tracking-number-input:focus {
            outline: none; border-color: var(--primary-color);
            box-shadow: 0 0 0 4px hsla(var(--primary-hue), var(--primary-saturation), var(--primary-lightness), 0.3);
        }
        .form-action-bar { display: flex; justify-content: space-between; align-items: center; }
        .pro-tip { font-size: 0.9rem; color: rgb(var(--subtle-text-rgb)); }
        .track-button, .custom-button {
            padding: 0.75rem 1.5rem; font-size: 1rem; font-weight: 600;
            background-color: var(--primary-color); color: white;
            border: none; border-radius: 8px; cursor: pointer;
            transition: all 0.3s ease; display: inline-flex;
            align-items: center; gap: 8px;
        }
        .track-button:hover { background-color: hsl(var(--primary-hue), var(--primary-saturation), 50%); transform: translateY(-2px); }
        .custom-button.secondary { background-color: rgba(var(--border-rgb), 0.5); color: rgb(var(--text-rgb)); }
        .custom-button.secondary:hover { background-color: rgba(var(--border-rgb), 0.8); }

		/* Tracking History and Results */
        #history-section h3 { margin-bottom: 1rem; font-family: var(--font-display); }
        #package-history-list { list-style: none; display: flex; flex-direction: column; gap: 0.75rem; }
        .history-item {
            display: flex; align-items: center; justify-content: space-between;
            background: rgba(var(--background-end-rgb), 0.5); padding: 0.75rem 1rem; border-radius: 8px;
            cursor: pointer; transition: background-color 0.2s;
        }
        .history-item:hover { background: rgba(var(--primary-hue), var(--primary-saturation), var(--primary-lightness), 0.1); }
        .history-info .carrier { text-transform: uppercase; font-weight: 700; font-size: 0.8rem; }
        .history-info .tracking-number { font-family: monospace; color: rgb(var(--subtle-text-rgb)); }
        .history-actions button { background: none; border: none; color: rgb(var(--subtle-text-rgb)); cursor: pointer; padding: 5px; font-size: 1rem; }
        .history-actions button:hover { color: rgb(var(--text-rgb)); }
		
        #tracking-results-container { margin: 2rem auto; max-width: 900px; }
        .delivery-details-card { animation: fadeIn 0.5s ease-out; }
        .details-header { border-bottom: 1px solid rgba(var(--border-rgb), 0.5); padding-bottom: 1.5rem; margin-bottom: 1.5rem; display: flex; align-items: center; gap: 1.5rem; }
        .details-icon { font-size: 2.5rem; width: 60px; height: 60px; display: flex; align-items: center; justify-content: center; border-radius: 50%; }
        .details-icon.delivered { color: var(--success-color); background-color: rgba(74, 222, 128, 0.1); }
        .details-icon.in-transit { color: #f59e0b; background-color: rgba(245, 158, 11, 0.1); }
        .details-header h2 { font-size: 1.8rem; font-family: var(--font-display); font-weight: 700; margin: 0; }
        .details-header .subtitle { font-size: 1rem; color: rgb(var(--subtle-text-rgb)); font-family: monospace; }
        .results-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; margin-bottom: 2rem; }
        .detail-item { background-color: rgba(var(--background-start-rgb), 0.8); padding: 1rem; border-radius: 8px; border: 1px solid rgba(var(--border-rgb), 0.5); }
        .detail-item h4 { color: rgb(var(--subtle-text-rgb)); font-size: 0.9rem; margin-bottom: 0.5rem; font-weight: 500; }
        .detail-item p { font-size: 1.1rem; font-weight: 500; }
        .timeline-map-container { display: grid; grid-template-columns: 1fr; gap: 2rem; }
        @media (min-width: 992px) { .timeline-map-container {grid-template-columns: 1fr 1fr;} }
        #tracking-map, #delivery-chart-container { height: 350px; border-radius: 12px; background: rgba(var(--background-start-rgb), 0.8); padding: 1rem; }
        #delivery-chart { max-height: 100%; }

		/* --- Widgets --- */
        .widgets-grid { display: grid; grid-template-columns: 1fr; gap: 2rem; max-width: 1200px; margin: 3rem auto 0; }
        @media (min-width: 992px) { .widgets-grid { grid-template-columns: 1.5fr 1fr; } }
        .widget h3 { font-family: var(--font-display); font-size: 1.2rem; margin-bottom: 1rem; border-bottom: 1px solid rgba(var(--border-rgb), 0.5); padding-bottom: 0.5rem; }

        /* --- Live Tracker --- */
        .live-tracker-layout { display: grid; gap: 2rem; grid-template-columns: 300px 1fr 250px; }
        .status-panel, .users-panel { height: 75vh; }
        .users-panel ul { list-style: none; height: calc(100% - 40px); overflow-y: auto; }
        .user-list-item { display:flex; align-items:center; gap:10px; padding: 8px; border-radius: 6px; transition: background-color 0.2s; }
        .user-list-item:hover { background-color: rgba(var(--border-rgb), 0.2); }
        .user-avatar { width: 32px; height: 32px; border-radius: 50%; object-fit: cover; }
        .map-container { padding: 0 !important; border-radius: 12px; overflow: hidden; }
        #map .leaflet-tile-pane { filter: brightness(0.8) contrast(1.2)
        }
        body.light-theme #map .leaflet-tile-pane { filter: none; }
        #map .leaflet-popup-content-wrapper { background: rgba(var(--card-background-rgb), 0.9) !important; color: rgb(var(--text-rgb)) !important; }
        .chat-container { margin-top: 1rem; display: flex; flex-direction: column; height: 200px; }
        #chat-messages { flex-grow: 1; overflow-y: auto; margin-bottom: 1rem; border: 1px solid rgba(var(--border-rgb), 0.5); border-radius: 8px; padding: 0.5rem; }
        .chat-message { margin-bottom: 0.5rem; }
        .chat-message strong { color: var(--primary-color); }
        #chat-form { display: flex; gap: 0.5rem; }
        #chat-input { flex-grow: 1; background: rgba(var(--background-end-rgb), 0.8); }

        /* --- Modals --- */
        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0,0,0,0.7); backdrop-filter: blur(5px);
            z-index: 5000; display: flex; justify-content: center; align-items: center;
            opacity: 0; visibility: hidden; transition: opacity 0.3s, visibility 0.3s;
        }
        .modal-overlay.visible { opacity: 1; visibility: visible; }
        .modal {
            background: rgb(var(--background-end-rgb));
            padding: 2rem; border-radius: 12px;
            box-shadow: 0 10px 40px var(--shadow-color);
            width: 90%; max-width: 500px;
            transform: scale(0.95); transition: transform 0.3s;
            border: 1px solid rgba(var(--border-rgb), 0.5);
        }
        .modal-overlay.visible .modal { transform: scale(1); }
        .modal h2 { margin-bottom: 1.5rem; text-align: center; }
        .modal .form-row { display: flex; flex-direction: column; gap: 0.5rem; margin-bottom: 1rem; }

        /* --- Responsive Adjustments --- */
		@media (max-width: 992px) {
			.live-tracker-layout { grid-template-columns: 1fr; }
			.status-panel, .users-panel, .map-container { height: auto; }
		}

        @media (max-width: 768px) {
            .app-main { padding: 1.5rem 5%; }
            .nav-links { display: none; flex-direction: column; position: absolute; top: 70px; left: 0; width: 100%; background: rgb(var(--background-start-rgb)); box-shadow: 0 8px 16px var(--shadow-color); padding: 1rem 0; gap: 0; }
            .nav-links.show { display: flex; }
            .nav-link { text-align: center; padding: 1rem; border-bottom: 1px solid rgba(var(--border-rgb), 0.5); }
            .settings-btn { margin: 0 1rem; padding-bottom: 1rem; }
            #mobile-menu-btn { display: block; }
            .results-grid { grid-template-columns: 1fr; }
			.form-action-bar { flex-direction: column; gap: 1rem; align-items: stretch; }
        }
	</style>
</head>
<body>

    <div id="toast-container"></div>

    <div id="app-container">
        <header class="app-header">
            <nav class="navbar">
                <a href="/" class="nav-logo"><i class="fas fa-satellite-dish"></i><span>UltimateTracker</span></a>
                <div class="nav-actions">
                    <div class="nav-links" id="nav-links">
                        <a class="nav-link active" data-view="package-tracker-view"><i class="fas fa-box-open"></i> Package Tracker</a>
                        <a class="nav-link" data-view="live-tracker-view"><i class="fas fa-map-marked-alt"></i> Live Hub</a>
                        <button class="settings-btn" id="settings-btn"><i class="fas fa-cog"></i> Settings</button>
                    </div>
                     <button id="mobile-menu-btn"><i class="fas fa-bars"></i></button>
                </div>
            </nav>
        </header>

        <main class="app-main">

            <!-- View 1: Package Tracker -->
            <div id="package-tracker-view" class="view active-view">
                <section class="hero-section text-center">
                    <h1>Your World, Tracked.</h1>
                    <p>Enter one or more tracking numbers below. We'll automatically detect the carrier and fetch the latest updates.</p>
                </section>
                <section class="card">
                     <form id="tracking-form">
                        <div class="textarea-group">
                             <textarea id="tracking-number-input" placeholder="Paste tracking numbers here, one per line...
e.g., 9400111202555842332669
1Z...
Amazon Order ID: 113-1234567-1234567" required></textarea>
                        </div>
                        <div class="form-action-bar">
                            <span class="pro-tip"><i class="fas fa-lightbulb"></i> Pro-Tip: Paste multiple numbers at once!</span>
						    <button type="submit" class="track-button" id="track-btn"><i class="fas fa-search-location"></i> Track Packages</button>
                        </div>
                    </form>
                    <div id="form-error"></div>
                </section>
                <div id="tracking-results-container"></div>
                <section id="history-section" class="card" style="display: none;">
                    <h3><i class="fas fa-history"></i> My Packages</h3>
                    <ul id="package-history-list"></ul>
                </section>
                <section class="widgets-grid">
                    <div id="weather-widget" class="widget card"></div>
                    <div id="quote-widget" class="widget card"></div>
                </section>
            </div>

            <!-- View 2: Live Geolocation Hub -->
            <div id="live-tracker-view" class="view">
                 <section class="hero-section text-center">
                    <h2>Live Geolocation Hub</h2>
                    <p>Share your location and interact with other users on the map in real-time.</p>
                </section>
                <div class="live-tracker-layout">
                    <aside class="status-panel card">
                        <h3><i class="fas fa-broadcast-tower"></i> Control Panel</h3>
                        <p id="connection-status">🔴 Disconnected</p>
                        <p><strong>Username:</strong> <span id="username-display">Not Set</span></p>
                        <p><strong>Latitude:</strong> <span id="lat">--</span></p>
                        <p><strong>Longitude:</strong> <span id="lng">--</span></p>
                        <div class="button-group">
                          <button id="startBtn" class="custom-button" disabled><i class="fas fa-location-arrow"></i> Share Location</button>
                          <button id="stopBtn" class="custom-button secondary" disabled><i class="fas fa-stop-circle"></i> Stop Sharing</button>
                        </div>
                        <div class="chat-container">
                            <h3><i class="fas fa-comments"></i> Group Chat</h3>
                            <div id="chat-messages"></div>
                            <form id="chat-form">
                                <input type="text" id="chat-input" class="form-control" autocomplete="off" placeholder="Type a message...">
                                <button type="submit" class="custom-button"><i class="fas fa-paper-plane"></i></button>
                            </form>
                        </div>
                    </aside>
                    <div id="map" class="map-container card"></div>
                    <aside class="users-panel card">
                         <h3><i class="fas fa-users"></i> Online Users <span id="user-count">(0)</span></h3>
                         <ul id="users-list"></ul>
                    </aside>
                </div>
            </div>
        </main>

        <footer class="app-footer">
            <p>© 2024 Ultimate Tracker. All Rights Reserved. An advanced client-server application.</p>
        </footer>
    </div>
    
    <!-- Modals -->
    <div id="settings-modal" class="modal-overlay">
        <div class="modal">
            <h2 id="modal-title"><i class="fas fa-cog"></i> Application Settings</h2>
             <div class="form-row">
                <label for="theme-switcher">Theme</label>
                <select id="theme-switcher" class="custom-button secondary">
                    <option value="dark">Dark Mode</option>
                    <option value="light">Light Mode</option>
                </select>
            </div>
            <div class="form-row">
                <label for="color-picker">Accent Color</label>
                <input type="color" id="color-picker" value="#7c3aed">
            </div>
             <button id="close-settings" class="custom-button">Close</button>
        </div>
    </div>
    <div id="username-modal" class="modal-overlay">
         <div class="modal">
            <h2>Welcome to the Live Hub!</h2>
            <p style="text-align:center; margin-bottom: 1.5rem;">Please enter a username to join the map.</p>
            <form id="username-form">
                <div class="form-row">
                    <input type="text" id="username-input" class="form-control" placeholder="e.g., Captain-Hook" required>
                </div>
                <button type="submit" class="custom-button" style="width:100%;">Join</button>
            </form>
        </div>
    </div>
    

<!-- Embedded JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {

    const App = (() => {
        const state = {
            currentView: 'package-tracker-view',
            history: [],
        };
        const elements = {
            views: document.querySelectorAll('.view'),
            navLinks: document.querySelectorAll('.nav-link'),
            mobileMenuBtn: document.getElementById('mobile-menu-btn'),
            navLinksContainer: document.getElementById('nav-links'),
            settingsBtn: document.getElementById('settings-btn'),
            settingsModal: document.getElementById('settings-modal'),
            closeSettingsBtn: document.getElementById('close-settings'),
        };

        const init = () => {
            elements.navLinks.forEach(link => link.addEventListener('click', (e) => switchView(e.currentTarget.dataset.view)));
            elements.mobileMenuBtn.addEventListener('click', () => elements.navLinksContainer.classList.toggle('show'));
            elements.settingsBtn.addEventListener('click', () => elements.settingsModal.classList.add('visible'));
            elements.closeSettingsBtn.addEventListener('click', () => elements.settingsModal.classList.remove('visible'));
            document.querySelector('.nav-logo').addEventListener('click', (e) => { e.preventDefault(), switchView('package-tracker-view'); });
            
            ThemeManager.init();
            PackageTracker.init();
            LiveTracker.init();
            
            // Register a basic service worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js').catch(err => console.error('Service Worker registration failed:', err));
            }
        };

        const switchView = (viewId) => {
            state.currentView = viewId;
            elements.views.forEach(v => v.classList.toggle('active-view', v.id === viewId));
            elements.navLinks.forEach(l => l.classList.toggle('active', l.dataset.view === viewId));
            if (elements.navLinksContainer.classList.contains('show')) elements.mobileMenuBtn.click();
            if (viewId === 'live-tracker-view') LiveTracker.initMap();
        };
        
        return { init };
    })();

    const ThemeManager = (() => {
        const elements = {
            themeSwitcher: document.getElementById('theme-switcher'),
            colorPicker: document.getElementById('color-picker'),
        };

        const init = () => {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            const savedColor = localStorage.getItem('primaryColor') || '#7c3aed';
            
            elements.themeSwitcher.value = savedTheme;
            elements.colorPicker.value = savedColor;
            
            applyTheme(savedTheme);
            applyColor(savedColor);

            elements.themeSwitcher.addEventListener('change', (e) => applyTheme(e.target.value));
            elements.colorPicker.addEventListener('input', (e) => applyColor(e.target.value));
        };

        const applyTheme = (theme) => {
            document.body.classList.toggle('light-theme', theme === 'light');
            localStorage.setItem('theme', theme);
        };
        
        const hexToHsl = (hex) => {
            let result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            let r = parseInt(result[1], 16) / 255;
            let g = parseInt(result[2], 16) / 255;
            let b = parseInt(result[3], 16) / 255;
            let max = Math.max(r, g, b), min = Math.min(r, g, b);
            let h, s, l = (max + min) / 2;
            if (max === min) { h = s = 0; }
            else {
                let d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch(max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
            }
            return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];
        };

        const applyColor = (hex) => {
            const [h, s, l] = hexToHsl(hex);
            document.documentElement.style.setProperty('--primary-hue', h);
            document.documentElement.style.setProperty('--primary-saturation', `${s}%`);
            document.documentElement.style.setProperty('--primary-lightness', `${l}%`);
            localStorage.setItem('primaryColor', hex);
        };

        return { init };
    })();

    const ToastNotifier = (() => {
        const container = document.getElementById('toast-container');
        
        const show = (message, type = 'info') => {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            let iconClass = 'fa-info-circle';
            if (type === 'success') iconClass = 'fa-check-circle';
            if (type === 'error') iconClass = 'fa-exclamation-circle';

            toast.innerHTML = `<i class="fas ${iconClass} toast-icon"></i><div>${message}</div>`;
            container.appendChild(toast);
            
            setTimeout(() => toast.remove(), 5000);
        };
        
        return { show };
    })();

    const PackageTracker = (() => {
        let history = [];
        const elements = {
            form: document.getElementById('tracking-form'),
            input: document.getElementById('tracking-number-input'),
            error: document.getElementById('form-error'),
            results: document.getElementById('tracking-results-container'),
            historySection: document.getElementById('history-section'),
            historyList: document.getElementById('package-history-list'),
            trackBtn: document.getElementById('track-btn'),
        };

        const init = () => {
            elements.form.addEventListener('submit', handleFormSubmit);
            loadHistory();
            renderWidgets();
        };

        const loadHistory = () => {
             history = JSON.parse(localStorage.getItem('packageHistory') || '[]');
             renderHistory();
        };

        const saveHistory = () => {
            localStorage.setItem('packageHistory', JSON.stringify(history));
        };

        const addToHistory = (trackingNumber, carrier) => {
            // Avoid duplicates
            if (!history.find(item => item.trackingNumber === trackingNumber)) {
                history.unshift({ trackingNumber, carrier, id: Date.now() });
                if (history.length > 10) history.pop(); // Keep history size manageable
                saveHistory();
                renderHistory();
            }
        };
        
        const removeFromHistory = (id) => {
            history = history.filter(item => item.id !== id);
            saveHistory();
            renderHistory();
        };

        const renderHistory = () => {
            if(history.length === 0) {
                elements.historySection.style.display = 'none';
                return;
            }
            elements.historySection.style.display = 'block';
            elements.historyList.innerHTML = history.map(item => `
                <li class="history-item">
                    <div class="history-info" data-tn="${item.trackingNumber}" data-carrier="${item.carrier}">
                        <div class="carrier">${item.carrier.toUpperCase()}</div>
                        <div class="tracking-number">${item.trackingNumber}</div>
                    </div>
                    <div class="history-actions">
                        <button class="delete-history-btn" data-id="${item.id}" title="Remove from history"><i class="fas fa-times"></i></button>
                    </div>
                </li>
            `).join('');

            elements.historyList.querySelectorAll('.history-info').forEach(el => {
                el.addEventListener('click', (e) => {
                    elements.input.value = e.currentTarget.dataset.tn;
                    ToastNotifier.show(`Tracking number ${e.currentTarget.dataset.tn} loaded.`);
                });
            });
            elements.historyList.querySelectorAll('.delete-history-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    removeFromHistory(parseInt(e.currentTarget.dataset.id));
                });
            });
        };

        const handleFormSubmit = async (e) => {
            e.preventDefault();
            const trackingNumbers = elements.input.value.split('\n').map(s => s.trim()).filter(Boolean);
            elements.error.textContent = '';
            
            if (trackingNumbers.length === 0) {
                elements.error.textContent = 'Please enter at least one tracking number.';
                return;
            }

            elements.trackBtn.disabled = true;
            elements.trackBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Tracking...`;
            elements.results.innerHTML = '';
            
            for (const tn of trackingNumbers) {
                await trackSinglePackage(tn);
            }
            
            elements.trackBtn.disabled = false;
            elements.trackBtn.innerHTML = `<i class="fas fa-search-location"></i> Track Packages`;
        };

        const trackSinglePackage = async (trackingNumber) => {
             const resultCard = document.createElement('div');
             resultCard.innerHTML = `<div class="card loading-indicator"><i class="fas fa-spinner fa-spin"></i> Searching for ${trackingNumber}...</div>`;
             elements.results.appendChild(resultCard);
            
            try {
                const response = await fetch('/api/track', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ trackingNumber })
                });
                const data = await response.json();
                if (!response.ok) throw new Error(data.error);

                 renderResult(resultCard, data);
                 addToHistory(data.trackingNumber, data.carrier);
            } catch (error) {
                console.error("Tracking error:", error);
                resultCard.innerHTML = `<div class="card error"><i class="fas fa-exclamation-triangle"></i> Error for ${trackingNumber}: ${error.message}</div>`;
            }
        };

        const renderResult = (container, data) => {
            const statusIcon = data.status.toLowerCase().includes('delivered') ? 'fa-check-circle' : 'fa-truck-fast';
            const iconClass = data.status.toLowerCase().includes('delivered') ? 'delivered' : 'in-transit';

            const activityHtml = data.activity.map((act, index) => `
                <div class="timeline-item ${index === 0 ? 'active-event' : ''}">
                    <strong>${act.status}</strong>
                    <span>${act.location}: ${act.description}</span>
                    <span style="display:block; font-size: 0.8rem;">${new Date(act.timestamp).toLocaleString()}</span>
                </div>`).join('');
            
            container.innerHTML = `
                <div class="delivery-details-card card">
                    <div class="details-header">
                        <div class="details-icon ${iconClass}"><i class="fas ${statusIcon}"></i></div>
                        <div><h2>${data.carrier}</h2><span class="subtitle">${data.trackingNumber}</span></div>
                    </div>
                    <div class="results-grid">
                        <div class="detail-item"><h4>Status</h4><p>${data.status}</p></div>
                        <div class="detail-item"><h4>Est. Delivery</h4><p>${data.estimatedDelivery}</p></div>
                    </div>
                    <div class="timeline-map-container">
                        ${activityHtml ? `<div><h3><i class="fas fa-route"></i> Journey</h3><div class="package-timeline">${activityHtml}</div></div>` : ''}
                        <div>
                         <h3><i class="fas fa-map"></i> Route</h3>
                         <div id="tracking-map-${data.trackingNumber}" class="tracking-map"></div>
                         <h3><i class="fas fa-chart-line"></i> Analytics</h3>
                         <div id="delivery-chart-container-${data.trackingNumber}"><canvas id="delivery-chart-${data.trackingNumber}"></canvas></div>
                        </div>
                    </div>
                </div>`;
                
            renderTrackingMap(`tracking-map-${data.trackingNumber}`, data.activity);
            renderTrackingChart(`delivery-chart-${data.trackingNumber}`, data.activity);
        };

        const renderTrackingMap = (elementId, activity) => {
            try {
                const mapElement = document.getElementById(elementId);
                if (!mapElement) return;
                const points = activity.filter(a => a.geo).map(a => [a.geo.lat, a.geo.lon]);
                if (points.length === 0) { mapElement.innerHTML = '<p style="text-align:center; padding-top: 40%;">No geodata available for this package.</p>'; return; }
                const map = L.map(elementId).setView(points[0], 4);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
                L.polyline(points, {color: 'var(--primary-color)'}).addTo(map);
                points.forEach((p, i) => L.circleMarker(p, {radius: 6, color: 'var(--primary-color)'}).addTo(map).bindPopup(activity.find(a=>a.geo.lat===p[0]).status));
                map.fitBounds(points, { padding: [50, 50] });
            } catch (e) { console.error("Map rendering failed:", e); }
        };

        const renderTrackingChart = (canvasId, activity) => {
            const chartElement = document.getElementById(canvasId);
            if (!chartElement || activity.length < 2) return;
            
            const labels = [];
            const data = [];
            for (let i = activity.length - 2; i >= 0; i--) {
                const prev = new Date(activity[i+1].timestamp);
                const curr = new Date(activity[i].timestamp);
                const diffHours = Math.abs(curr - prev) / 36e5;
                if(diffHours > 0.1) {
                    labels.push(`${activity[i+1].status} → ${activity[i].status}`);
                    data.push(diffHours.toFixed(1));
                }
            }
             if (labels.length === 0) return;

            new Chart(chartElement, {
                type: 'bar',
                data: {
                    labels,
                    datasets: [{
                        label: 'Hours Between Events',
                        data,
                        backgroundColor: 'hsla(var(--primary-hue), var(--primary-saturation), var(--primary-lightness), 0.5)',
                        borderColor: 'var(--primary-color)',
                        borderWidth: 1
                    }]
                },
                options: { maintainAspectRatio: false, scales: { y: { beginAtZero: true, ticks: {color: 'rgb(var(--subtle-text-rgb))'} }, x: { ticks: {color: 'rgb(var(--subtle-text-rgb))'} } }, plugins: { legend: { display: false } } }
            });
        };
        
        const renderWidgets = async () => { /* Renders Weather & Quote */ }; // Kept for modularity call

        return { init };
    })();

    const LiveTracker = (() => {
        let map = null, markers = {}, watchId = null, username = '', socket;
        const elements = {
            usernameModal: document.getElementById('username-modal'),
            usernameForm: document.getElementById('username-form'),
            usernameInput: document.getElementById('username-input'),
            startBtn: document.getElementById('startBtn'),
            stopBtn: document.getElementById('stopBtn'),
        };

        const init = () => {
            elements.usernameForm.addEventListener('submit', handleUsernameSubmit);
            document.querySelector('a[data-view="live-tracker-view"]').addEventListener('click', () => {
                if(!username) elements.usernameModal.classList.add('visible');
                initMap();
            });
            elements.startBtn.addEventListener('click', startTracking);
            elements.stopBtn.addEventListener('click', stopTracking);
            document.getElementById('chat-form').addEventListener('submit', (e)=>{
                e.preventDefault();
                const input = document.getElementById('chat-input');
                if(input.value) {
                    socket.emit('send_chat_message', input.value);
                    input.value = '';
                }
            });
        };

        const handleUsernameSubmit = (e) => {
            e.preventDefault();
            username = elements.usernameInput.value.trim();
            if (!username) return;
            document.getElementById('username-display').textContent = username;
            elements.usernameModal.classList.remove('visible');
            elements.startBtn.disabled = false;
            connectSocket();
        }

        const initMap = () => {
            if (!map && document.getElementById('map')) {
                map = L.map('map').setView([20, 0], 2);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
            }
        };
        
        const connectSocket = () => {
             socket = io({ transports: ["websocket"] });
             socket.on('connect', () => {
                 document.getElementById('connection-status').innerHTML = "🟢 Connected";
                 document.getElementById('connection-status').className = 'connected';
                 socket.emit('join', username);
             });
             socket.on('connect_error', () => { document.getElementById('connection-status').innerHTML = "🔴 Server Down"; });
             socket.on('current_users', (users) => users.forEach(user => updateUser(user)));
             socket.on('user_joined', (user) => { ToastNotifier.show(`${user.username} joined the map!`, 'success'); updateUser(user); });
             socket.on('receive-location', (data) => updateUser(data));
             socket.on('user_disconnected', (id) => { const u=document.getElementById(`user-${id}`); if(u) ToastNotifier.show(`${u.dataset.username} left.`); removeUser(id); });
             socket.on('receive_chat_message', (data) => {
                 const chatBox = document.getElementById('chat-messages');
                 chatBox.innerHTML += `<div class="chat-message"><strong>${data.user.username}:</strong> ${data.message}</div>`;
                 chatBox.scrollTop = chatBox.scrollHeight;
             });
        };
        
        const startTracking = () => {
            if (!navigator.geolocation) { alert("Geolocation is not supported."); return; }
            watchId = navigator.geolocation.watchPosition(
                ({ coords: { latitude, longitude } }) => {
                    socket.emit("send-location", { latitude, longitude });
                    updateUser({ id: socket.id, username, latitude, longitude, avatar: `https://i.pravatar.cc/40?u=${socket.id}` }); // Update self immediately
                    document.getElementById('lat').textContent = latitude.toFixed(4); document.getElementById('lng').textContent = longitude.toFixed(4);
                }, (err) => console.error(err), { enableHighAccuracy: true });
            elements.startBtn.disabled = true; elements.stopBtn.disabled = false;
        };
        const stopTracking = () => { if (watchId) navigator.geolocation.clearWatch(watchId); watchId = null; elements.startBtn.disabled = false; elements.stopBtn.disabled = true; };
        
        const updateUser = (user) => {
            if (!map || !user?.latitude) return;
            if (!markers[user.id]) {
                const icon = L.icon({ iconUrl: user.avatar, iconSize: [38, 38], className: 'leaflet-avatar-icon' });
                markers[user.id] = L.marker([user.latitude, user.longitude], {icon}).addTo(map).bindPopup(user.username);
            }
            markers[user.id].setLatLng([user.latitude, user.longitude]);
            if (user.id === socket.id) map.setView([user.latitude, user.longitude], 13);
            
            let userEl = document.getElementById(`user-${user.id}`);
            if (!userEl) {
                userEl = document.createElement('li');
                userEl.id = `user-${user.id}`; userEl.className = 'user-list-item';
                document.getElementById('users-list').appendChild(userEl);
            }
            userEl.dataset.username = user.username;
            userEl.innerHTML = `<img src="${user.avatar}" class="user-avatar"> ${user.username}`;
            document.getElementById('user-count').textContent = `(${Object.keys(markers).length})`;
        };
        
        const removeUser = (id) => {
            if (markers[id]) { map.removeLayer(markers[id]); delete markers[id]; }
            const userEl = document.getElementById(`user-${id}`); if(userEl) userEl.remove();
            document.getElementById('user-count').textContent = `(${Object.keys(markers).length})`;
        };
        
        return { init, initMap };
    })();

    // --- Grand Initialization ---
    App.init();
});
</script>
</body>
</html>
